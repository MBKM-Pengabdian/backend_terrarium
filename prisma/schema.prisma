// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model Jwt {
   id            Int      @id @default(autoincrement())
   role          String
   user_id       String
   refresh_token String
   created_at    DateTime @default(now())
   user          User     @relation(fields: [user_id], references: [uuid], onDelete: Cascade)
}

model Jwt_Customer {
   id            Int      @id @default(autoincrement())
   customer_id   String
   refresh_token String
   created_at    DateTime @default(now())
   customer      Customer @relation(fields: [customer_id], references: [uuid], onDelete: Cascade)
}

model User {
   uuid       String    @id @default(uuid())
   username   String
   email      String    @unique
   password   String
   phone      String
   address    String
   role       String
   created_at DateTime  @default(now())
   jwt        Jwt[]
   event      Event[]
   banner     Banner[]
   products   Product[]
}

model Customer {
   uuid           String           @id @default(uuid())
   username       String
   email          String           @unique
   password       String
   phone          String
   address        String
   created_at     DateTime         @default(now())
   order          Order[]
   riview         Review[]
   jwt            Jwt_Customer[]
   Register_Event Register_Event[]
   Cart           Cart[]
   Payment        Payment[]
}

model Order {
   uuid         String       @id @default(uuid())
   customer_id  String
   order_date   DateTime     @default(now())
   total_amount Float
   created_at   DateTime     @default(now())
   customer     Customer     @relation(fields: [customer_id], references: [uuid], onDelete: Cascade)
   order_item   Order_Item[]
}

model Product {
   uuid           String       @id @default(uuid())
   product_name   String
   product_image  String?
   description    String
   price          Float
   stock_quantity Int
   created_at     DateTime     @default(now())
   user_id        String
   user           User         @relation(fields: [user_id], references: [uuid])
   riview         Review[]
   order_item     Order_Item[]
   Cart           Cart[]
   Payment        Payment[]
}

model Review {
   uuid        String   @id @default(uuid())
   product_id  String
   customer_id String
   rating      Int
   comment     String
   img_review  String
   created_at  DateTime @default(now())
   product     Product  @relation(fields: [product_id], references: [uuid], onDelete: Cascade)
   customer    Customer @relation(fields: [customer_id], references: [uuid], onDelete: Cascade)
}

model Order_Item {
   uuid       String   @id @default(uuid())
   product_id String
   order_id   String
   quantity   String
   subtotal   String
   created_at DateTime @default(now())
   product    Product  @relation(fields: [product_id], references: [uuid], onDelete: Cascade)
   order      Order    @relation(fields: [order_id], references: [uuid], onDelete: Cascade)
}

model Banner {
   uuid            String   @id @default(uuid())
   user_id         String
   img_banner      String
   title_banner    String
   desc_banner     String
   priority_banner Int
   status_banner   Int
   created_at      DateTime @default(now())
   user            User     @relation(fields: [user_id], references: [uuid], onDelete: Cascade)
}

model Event {
   uuid           String           @id @default(uuid())
   user_id        String
   img_event      String?
   title_event    String
   price_event    String
   contact_person String
   place          String
   status         Boolean
   created_at     DateTime         @default(now())
   user           User             @relation(fields: [user_id], references: [uuid], onDelete: Cascade)
   detail_event   Detail_Event[]
   Register_Event Register_Event[]
}

model Detail_Event {
   id                Int        @id @default(autoincrement())
   event_id          String
   description_event String
   sponsor_event     String
   speaker_event     String
   banner_event      String?
   tag_event         String
   date_event        String
   last_regist_event String
   kuota_event       Int
   created_at        DateTime   @default(now())
   event             Event      @relation(fields: [event_id], references: [uuid], onDelete: Cascade)
   timeline          Timeline[]
}

model Timeline {
   id              Int          @id @default(autoincrement())
   detail_event_id Int
   waktu           String
   title           String
   created_at      DateTime     @default(now())
   detail_event    Detail_Event @relation(fields: [detail_event_id], references: [id], onDelete: Cascade)
}

model Register_Event {
   uuid               String   @id @default(uuid())
   customer_id        String
   event_id           String
   email_customer     String
   fullname_customer  String
   customer           Customer @relation(fields: [customer_id], references: [uuid])
   event              Event    @relation(fields: [event_id], references: [uuid])
   created_at         DateTime @default(now())
   token_registration String   @default(uuid())

   @@unique([customer_id, event_id])
}

model Cart {
   uuid        String   @id @default(uuid())
   customer_id String
   product_id  String
   quantity    Int
   created_at  DateTime @default(now())
   product     Product  @relation(fields: [product_id], references: [uuid], onDelete: Cascade)
   customer    Customer @relation(fields: [customer_id], references: [uuid], onDelete: Cascade)
}

model Payment {
   uuid              String   @id @default(uuid())
   customer_id       String
   product_id        String
   quantity          Int
   harga_barang      Int
   total_harga       Int
   customer_email    String   @db.VarChar(255)
   snap_token        String?  @db.VarChar(255)
   snap_redirect_url String?  @db.VarChar(255)
   created_at        DateTime @default(now())
   product           Product  @relation(fields: [product_id], references: [uuid], onDelete: Cascade)
   customer          Customer @relation(fields: [customer_id], references: [uuid], onDelete: Cascade)
}
